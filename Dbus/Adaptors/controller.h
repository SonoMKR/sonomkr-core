
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__Adaptors_controller_h__ADAPTOR_MARSHAL_H
#define __dbusxx__Adaptors_controller_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace fr {
namespace sonomkr {

class Controller_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    Controller_adaptor()
    : ::DBus::InterfaceAdaptor("fr.sonomkr.Controller")
    {
        bind_property(isRunning, "b", true, false);
        bind_property(autoStart, "b", true, true);
        register_method(Controller_adaptor, startAcquisition, _startAcquisition_stub);
        register_method(Controller_adaptor, stopAcquisition, _stopAcquisition_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument startAcquisition_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument stopAcquisition_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod Controller_adaptor_methods[] = 
        {
            { "startAcquisition", startAcquisition_args },
            { "stopAcquisition", stopAcquisition_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod Controller_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty Controller_adaptor_properties[] = 
        {
            { "isRunning", "b", true, false },
            { "autoStart", "b", true, true },
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface Controller_adaptor_interface = 
        {
            "fr.sonomkr.Controller",
            Controller_adaptor_methods,
            Controller_adaptor_signals,
            Controller_adaptor_properties
        };
        return &Controller_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */
    ::DBus::PropertyAdaptor< bool > isRunning;
    ::DBus::PropertyAdaptor< bool > autoStart;

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual void startAcquisition() = 0;
    virtual void stopAcquisition() = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _startAcquisition_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        startAcquisition();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _stopAcquisition_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        stopAcquisition();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } 
#endif //__dbusxx__Adaptors_controller_h__ADAPTOR_MARSHAL_H
