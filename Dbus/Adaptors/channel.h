
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__Adaptors_channel_h__ADAPTOR_MARSHAL_H
#define __dbusxx__Adaptors_channel_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace fr {
namespace sonomkr {

class Channel_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    Channel_adaptor()
    : ::DBus::InterfaceAdaptor("fr.sonomkr.Channel")
    {
        bind_property(active, "b", true, true);
        bind_property(minFreq, "i", true, true);
        bind_property(maxFreq, "i", true, true);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument newSpectrum_args[] = 
        {
            { "data", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod Channel_adaptor_methods[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod Channel_adaptor_signals[] = 
        {
            { "newSpectrum", newSpectrum_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty Channel_adaptor_properties[] = 
        {
            { "active", "b", true, true },
            { "minFreq", "i", true, true },
            { "maxFreq", "i", true, true },
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface Channel_adaptor_interface = 
        {
            "fr.sonomkr.Channel",
            Channel_adaptor_methods,
            Channel_adaptor_signals,
            Channel_adaptor_properties
        };
        return &Channel_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */
    ::DBus::PropertyAdaptor< bool > active;
    ::DBus::PropertyAdaptor< int32_t > minFreq;
    ::DBus::PropertyAdaptor< int32_t > maxFreq;

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */

public:

    /* signal emitters for this interface
     */
    void newSpectrum(const std::string& arg1)
    {
        ::DBus::SignalMessage sig("newSpectrum");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
};

} } 
#endif //__dbusxx__Adaptors_channel_h__ADAPTOR_MARSHAL_H
